plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    // id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}
// Detect if the build is for a bundle (AAB)
def isBundleBuild = gradle.startParameter.taskNames.any { it.toLowerCase().contains("bundle") }

def getFlutterAppName() {
    def pubspec = new File("${project.rootDir}/../pubspec.yaml")
    def nameLine = pubspec.readLines().find { it.startsWith('name:') }
    return nameLine ? nameLine.split(": ")[1].trim() : "my_app"
}
// Function to read and increment the version in pubspec.yaml
def updateFlutterVersion(boolean isReleaseBuild) {
    if (!isReleaseBuild) {
        println "Skipping version update for non-release build."
        return;
    }
    def pubspec = new File("${project.rootDir}/../pubspec.yaml")
    if (!pubspec.exists()) return

    def lines = pubspec.readLines()
    def newLines = []
    
    lines.each { line ->
        if (line.startsWith("version:")) {
            def versionMatch = (line =~ /version:\s*(\d+\.\d+\.\d+)\+(\d+)/)
            if (versionMatch) {
                def versionName = versionMatch[0][1]  // e.g., "1.0.0"
                def versionCode = versionMatch[0][2].toInteger() + 1  // Increment build number
                newLines.add("version: ${versionName}+${versionCode}")
                println "ðŸ”„ Updated version in pubspec.yaml: ${versionName}+${versionCode}"
            } else {
                newLines.add(line)
            }
        } else {
            newLines.add(line)
        }
    }

    pubspec.text = newLines.join("\n")
}


def getFlutterVersionName() {
    def pubspec = new File("${project.rootDir}/../pubspec.yaml")
    def versionLine = pubspec.readLines().find { it.startsWith('version:') }
    return versionLine?.split(": ")[1]?.split("\\+")[0] ?: "1.0.0"
}

def getFlutterVersionCode() {
    def pubspec = new File("${project.rootDir}/../pubspec.yaml")
    def versionLine = pubspec.readLines().find { it.startsWith('version:') }
    return versionLine?.split("\\+")[1]?.toInteger() ?: 1
}
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
android {
    namespace = "com.contentive.crackitx"
    compileSdk = 35
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17

                coreLibraryDesugaringEnabled true

    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.contentive.crackitx"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 21
        targetSdk = 34
        versionCode getFlutterVersionCode()
        versionName getFlutterVersionName()

    }

 
    applicationVariants.all { variant ->
     updateFlutterVersion(variant.buildType.name.equals("release"));

        variant.outputs.all { output ->
            def appName = getFlutterAppName()
            def buildType = variant.buildType.name // Use build type instead of flavor
            def versionName = variant.versionName
            def versionCode = variant.versionCode

            outputFileName = "${appName}_${buildType}_${versionName}+${versionCode}.apk"
        }
    }
    signingConfigs {
        if(isBundleBuild){
     release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
        }
   
    }
       buildTypes {
        release {
            if(isBundleBuild){
 signingConfig signingConfigs.release
            }else{
                 signingConfig signingConfigs.debug
            }
           
            minifyEnabled false
            shrinkResources false
           // proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}
dependencies {
    // âœ… Add this dependency
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'

    // your other dependencies
}
flutter {
    source = "../.."
}
